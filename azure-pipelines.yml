trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Runtime: 'linux-musl-x64'
  ProjectVersion: '0.0'
  BuildNumber: '$(Build.BuildId)'
  VersionNumber: '$(projectVersion).$(buildNumber)'

stages:
  - stage: build
    displayName: 'Build'
    jobs:
      - job: restore
        displayName: 'Restore'
        steps:
          - task: UseDotNet@2
            inputs:
              version: '9.x'
          - task: DotNetCoreCLI@2
            name: Install_Fantomas
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install -g fantomas'
          - task: Bash@3
            displayName: "Run fantomas"
            inputs:
              targetType: 'inline'
              script: |
                fantomas "./src" --check
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: DotNetCoreCLI@2
            name: Restore
            inputs:
              command: 'restore'
              projects: '**/*.fsproj'
              arguments: '-r $(Runtime)'
      - job: build_azure
        displayName: 'Build Azure'
        dependsOn: restore
        steps:
          - task: UseDotNet@2
            inputs:
              version: '9.x'
          - task: DotNetCoreCLI@2
            name: Build
            inputs:
              command: 'build'
              projects: 'src/**/Worker.fsproj'
              arguments: '-r $(Runtime) -c Release -p:DefineConstants=AZ'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            name: Publish
            inputs:
              command: 'publish'
              projects: 'src/**/Worker.fsproj'
              arguments: '-r $(Runtime) -c Release --sc -p:PublishSingleFile=true -p:Version="$(VersionNumber)" -o $(Build.ArtifactStagingDirectory)/az -p:DefineConstants=AZ'
              publishWebProjects: false
              zipAfterPublish: false
          - task: PublishBuildArtifacts@1
            name: Pack
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/az'
              ArtifactName: 'az'
      - job: build_aws
        displayName: 'Build AWS'
        dependsOn: restore
        steps:
          - task: UseDotNet@2
            inputs:
              version: '9.x'
          - task: DotNetCoreCLI@2
            name: Build
            inputs:
              command: 'build'
              projects: 'src/**/Worker.fsproj'
              arguments: '-r $(Runtime) -c Release -p:DefineConstants=AWS'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            name: Publish
            inputs:
              command: 'publish'
              projects: 'src/**/Worker.fsproj'
              arguments: '-r $(Runtime) -c Release --sc -p:PublishSingleFile=true -p:Version="$(VersionNumber)" -o $(Build.ArtifactStagingDirectory)/aws -p:DefineConstants=AWS'
              publishWebProjects: false
              zipAfterPublish: false
          - task: PublishBuildArtifacts@1
            name: Pack
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/aws'
              ArtifactName: 'aws'
  - stage: publish_dev
    displayName: 'Publish DEV images'
    trigger: manual
    jobs:
      - deployment: publish_dev_azure
        displayName: 'Publish Azure DEV images'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: az

                - task: Docker@2
                  displayName: Build and push Azure image to container registry
                  inputs:
                    command: buildAndPush
                    repository: $(repository)
                    dockerfile: "$(Pipeline.Workspace)/az/Worker/Dockerfile"
                    containerRegistry: $(registry)
                    tags: |
                      0.0.$(Build.BuildId)-az-alpha
                      az-nightly
      - deployment: publish_dev_aws
        displayName: 'Publish AWS DEV images'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: aws

                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                    command: buildAndPush
                    repository: $(repository)
                    dockerfile: "$(Pipeline.Workspace)/aws/Worker/Dockerfile"
                    containerRegistry: $(registry)
                    tags: |
                      0.0.$(Build.BuildId)-aws-alpha
                      aws-nightly